#!/usr/bin/env bash

__rvm_setup_compile_environment()
{
  [[ "Darwin" == "$(uname)" ]] || return 0

  export CC
  typeset oldCC
  oldCC="${CC:-}"

  if [[ -x /usr/bin/gcc-4.2 ]]
  then
    true CC: ${CC:=/usr/bin/gcc-4.2}
  elif which gcc-4.2 > /dev/null
  then
    true CC: ${CC:=gcc-4.2}
  fi

  if [[ -n "${CC:-}" ]] && $CC --version | grep LLVM >/dev/null
  then
    if [[ "${CC:-}" == "$oldCC" ]]
    then
      rvm_error "The provided CC(${CC:-}) is LLVM based, it is not yet fully supported by ruby and gems, please read \`rvm requirements\`."
    else
      rvm_error "The autodetected CC(${CC:-}) is LLVM based, it is not yet fully supported by ruby and gems, please read \`rvm requirements\`, and set CC=/path/to/gcc ."
    fi
    exit 1
  fi

  [[ -n "${rvm_architectures:-}" ]] || return 0

  if [[ "${rvm_ruby_version}" =~ 1.9.* ]]
  then
    # Ruby 1.9.x supports the easy way
    rvm_configure_flags="${rvm_configure_flags:-} --with-arch=${rvm_architectures}"
  else
    export -a rvm_configure_env
    typeset architectures architecture

    for architecture in ${rvm_architectures//,/ }
    do architectures="${architectures} -arch ${architecture}"
    done

    rvm_configure_env+=(
      "MACOSX_DEPLOYMENT_TARGET=$(sw_vers -productVersion | awk -F'.' '{print $1"."$2}')"
    )
    rvm_configure_env+=("CFLAGS='${architectures} -g -Os -pipe -no-cpp-precomp'")
    rvm_configure_env+=("CCFLAGS='${architectures} -g -Os -pipe'")
    rvm_configure_env+=("CXXFLAGS='${architectures} -g -Os -pipe'")
    rvm_configure_env+=("LDFLAGS='${architectures} -bind_at_load'")
    rvm_configure_env+=(
      "LDSHARED='cc ${architectures} -dynamiclib -undefined suppress -flat_namespace'"
    )
    rvm_configure_env="${rvm_configure_env[*]}"

    if ! [[ "${rvm_patch_names:-}" =~ *osx-arch-fix* ]]
    then rvm_patch_names="osx-arch-fix ${rvm_patch_names:-}"
    fi
  fi
}

__rvm_mono_env()
{
  DYLD_LIBRARY_PATH="${rvm_usr_path}/lib:$DYLD_LIBRARY_PATH"
  C_INCLUDE_PATH="${rvm_usr_path}/include:$C_INCLUDE_PATH"
  ACLOCAL_PATH="${rvm_usr_path}/share/aclocal"
  ACLOCAL_FLAGS="-I $ACLOCAL_PATH"
  PKG_CONFIG_PATH="${rvm_usr_path}/lib/pkgconfig:$PKG_CONFIG_PATH"

  export  DYLD_LIBRARY_PATH C_INCLUDE_PATH ACLOCAL_PATH ACLOCAL_FLAGS PKG_CONFIG_PATH

  __rvm_add_to_path prepend "${rvm_usr_path}/bin"

  builtin hash -r

  return 0
}

# Returns all mri compatible (partly) ruby for use
# with things like rbx etc which require a ruby be installed.
__rvm_mri_rubies()
{
  typeset versions _ruby
  versions="${1:-"1.8.|ree|1.9."}"
  for _ruby in $( find $rvm_rubies_path/ -maxdepth 1 -mindepth 1 -type d -not -type l )
  do
    printf "%b" "${_ruby##*/}\n"
  done | grep -E "$versions"
}

# Returns the first mri compatible (partly) ruby for use
# with things like rbx etc which require a ruby be installed.
__rvm_mri_ruby()
{
  typeset versions
  versions="${1:-"1.8.|ree|1.9."}"
  _mri_rubies=( $( __rvm_mri_rubies "$versions" ) )
  _current_ruby=$(__rvm_env_string)
  if [[ " ${_mri_rubies[*]} " =~ " ${_current_ruby} " ]]
  then
    printf "%b" "${_current_ruby}\n"
  else
    for _ruby in ${_mri_rubies[@]}
    do
      printf "%b" "${_ruby}\n"
    done | sort | head -n 1
  fi
  return 0
}

__rvm_ensure_has_mri_ruby()
{
  typeset versions
  versions="${1:-"1.8.|ree|1.9."}"
  if [[ -z "$(__rvm_mri_ruby $versions)" ]]
  then
    typeset compat_result
    compat_result=0
    if ! ( "$rvm_bin_path"/rvm install 1.8.7 )
    then
      rvm_error "
To proceed rvm requires a 1.8-compatible ruby is installed.
We attempted to install 1.8.7 automatically but it failed.
Please install it manually (or a compatible alternative) to proceed.
"
      compat_result=1
    fi
    return $compat_result
  fi

  return 0
}
